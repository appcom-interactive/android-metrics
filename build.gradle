plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
    id 'jacoco'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.4"
}

def projectGroup = 'de.nanogiants.gradle'
def projectName = "android-metrics"
def projectVersion = gitTag()

def projectRepository = 'appcom-maven'
def projectDescription = "Retrieve all metrics from project and extract to metric.json"

def projectURL = "https://github.com/appcom-interactive/android-metrics"
def projectGit = "https://github.com/appcom-interactive/android-metrics.git"

group projectGroup
version projectVersion

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

dependencies {
    compileOnly gradleApi()

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    implementation("com.google.code.gson:gson:2.8.6")
    implementation("org.simpleframework:simple-xml:2.7.1")

//    implementation 'com.squareup.moshi:moshi-kotlin:1.9.2'
//    implementation 'com.tickaroo.tikxml:annotation:0.8.15'
//    implementation 'com.tickaroo.tikxml:core:0.8.15'
//    kapt 'com.tickaroo.tikxml:processor:0.8.15'

    testImplementation gradleTestKit()
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.5.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
}

jacoco {
    toolVersion = "0.8.5"
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events = ['passed', 'skipped', 'failed']
    }

    reports {
        junitXml.enabled = true
        html.enabled = true
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = projectGroup
            artifactId = projectName
            version = projectVersion

            from components.java
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    configurations = ['archives']
    publications = ['Publication']
    publish = true
    pkg {
        repo = projectRepository
        name = projectName
        userOrg = 'appcom-interactive'
        licenses = ['Apache-2.0']
        vcsUrl = projectGit
        version {
            name = projectVersion
            desc = projectDescription
            vcsTag = projectVersion
        }
    }
}

def gitTag() {
    def revlist = 'git rev-list --tags --max-count=1'.execute([], project.rootDir).text.trim()
    def versionName = ('git describe --tags ' + revlist.toString()).execute([], project.rootDir).text.trim()
    if (versionName != null) {
        return versionName
    } else {
        return "NO_VERSION"
    }
}